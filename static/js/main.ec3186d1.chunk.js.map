{"version":3,"sources":["components/style/Style.js","App.js","components/Numbers/Numbers.js","components/Controls/Controls.js","components/Total/total.js","serviceWorker.js","index.js"],"names":["num","btn","fontSize","background","border","textAlign","padding","width","height","margin","num0","nums","display","flexDirection","flexWrap","cancel","btnOrange","calcNum","color","body","justifyContent","alignItems","App","props","delete","e","x","y","state","total","i","length","setState","String","vide","setNumber","console","log","setTotal","eval","style","this","Component","Numbers","onClick","type","id","name","value","map","el","className","cont","Controls","Total","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ec3186d1.chunk.js","sourcesContent":["export const num = [\"7\", \"8\", \"9\", \"4\", \"5\", \"6\", \"1\", \"2\", \"3\"]\r\nexport const btn = {\r\n    fontSize: \"36px\",\r\n    background: \"#d8d9db\",\r\n    border: \"#000000 1px solid\",\r\n    textAlign: \"center\",\r\n    padding: \"20px\",\r\n    width: \" 90px\",\r\n    height: \"90px\",\r\n    margin: \"0\"\r\n}\r\nexport const num0 = {\r\n    fontSize: \"36px\",\r\n    background: \"#d8d9db\",\r\n    border: \"#000000 1px solid\",\r\n    textAlign: \"center\",\r\n    padding: \"20px\",\r\n    width: \"270px\",\r\n    height: \"90px\",\r\n    margin: \"0\"\r\n}\r\nexport const nums = { display: \"flex\", flexDirection: \"row\", width: \"270px\", flexWrap: \"wrap\" }\r\nexport const cancel = { ...btn, width: \"180px\" }\r\nexport const btnOrange = {\r\n    fontSize: \"36px\",\r\n\r\n    border: \"#000000 1px solid\",\r\n    textAlign: \"center\",\r\n    padding: \"20px\",\r\n    width: \" 90px\",\r\n    height: \"90px\",\r\n    margin: \"0\",\r\n    background: \"#df974c\"\r\n}\r\nexport const calcNum = {\r\n    background: \"#000000\",\r\n    color: \"white\",\r\n    width: \"360px\",\r\n    border: \" #000000 1px solid\",\r\n\r\n    textAlign: \"right\",\r\n    fontSize: \"20px\",\r\n    height: \" 90px\"\r\n}\r\nexport const body = {\r\n    height: \"100vh\",\r\n    display: \" flex\",\r\n    justifyContent: \"center\",\r\n    alignItems: \" center\",\r\n    flexDirection: \" column\"\r\n}\r\n\r\n","import React, { Component } from 'react';\nimport { Numbers } from './components/Numbers/Numbers';\nimport { Controls } from './components/Controls/Controls';\nimport { Total } from './components/Total/total';\nimport { body } from './components/style/Style';\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      total: \"\"\n    };\n  }\n  delete = (e) => {\n    let x = ''\n    let y = this.state.total\n    for (let i = 0; i < y.length - 1; i++) {\n      x += y[i]\n    }\n    this.setState({\n      total: String(x)\n    })\n\n\n\n  }\n  vide = () => {\n    this.setState({\n      total: \"\"\n    })\n  }\n  setNumber = (e) => {\n    this.setState({\n      total: this.state.total + e\n    })\n    console.log(this.state.total)\n  }\n  setTotal = () => {\n    this.setState({\n      total: eval(this.state.total)\n    })\n  }\n  render() {\n    return (\n      <div style={body}>\n        <Total total={this.state.total} />\n\n\n\n        <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n\n          <Numbers setNumber={this.setNumber} delete={this.delete} vide={this.vide} /> \n          <Controls setNumber={this.setNumber} setTotal={this.setTotal} />\n\n        </div>\n\n\n\n      </div>\n\n    );\n  }\n}\n\nexport default App;","import React from 'react';\r\nimport { num, num0, btn, nums, cancel } from \"../style/Style\"\r\nexport const Numbers = (props) => {\r\n    return (\r\n        <div style={nums}>\r\n            <input onClick={() => props.vide()} style={cancel} type=\"button\" id=\"clear\" name=\"clear\" value=\"c\" />\r\n\r\n            <input onClick={() => props.delete()} style={btn} type=\"button\" id=\"delete\" name=\"delete\" value=\"&#8592;\" />\r\n\r\n\r\n            {num.map(el => {\r\n                return (\r\n                    <div>\r\n                        <input onClick={() => props.setNumber(el)} className={`num${el}`} style={btn} type=\"button\" name={`num${el}`} value={el} />\r\n\r\n                    </div>\r\n                )\r\n            }\r\n            )\r\n            }\r\n            <input onClick={() => props.setNumber(0)} className={`num0`} style={num0} type=\"button\" name={`num0`} value={0} />\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport { btnOrange } from '../style/Style';\r\nlet cont = [\"/\", \"*\", \"-\", \"+\"]\r\nexport const Controls = (props) => {\r\n    return (\r\n        <div>\r\n            {cont.map(el => {\r\n                return (\r\n                    <div>\r\n                        <input onClick={() => props.setNumber(el)} className={`num${el}`} style={btnOrange} type=\"button\" name={`num${el}`} value={el} />\r\n\r\n                    </div>\r\n                )\r\n            }\r\n            )\r\n            }\r\n            <input onClick={() => props.setTotal()} className={`numE`} style={btnOrange} type=\"button\" name={`numE`} value={\"=\"} />\r\n\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport { calcNum } from '../style/Style';\r\nexport const Total = (props) => {\r\n    return (\r\n        <div>\r\n            <input style={calcNum} type=\"button\" id=\"res\" name=\"one\" value={\"    \" + props.total} />\r\n\r\n        </div>)\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}